name: packetfence_perl_deb_package
on:
  push:
    branches-ignore: 
      - 'devel'   # excludes devel
    paths:
      - 'addons/packetfence-perl/**'
      - '.github/workflows/docker-packetfence-perl-deb.yml'
      - 'containers/packetfence-perl/debian/**'
  schedule:
    - cron: '0 1 * * *'
  pull_request:
    branches: [ "devel" ]
    paths:
      - 'addons/packetfence-perl/**'

env:
  WORKDIR: "/root"
  VOLUME_MOUNT: "/mnt/${{ github.run_id }}_${{ github.run_attempt }}"
  OUTPUT_DIRECTORY: "/mnt/output/"
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_image:
    runs-on: packetfence-perl-deb-package-build
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    outputs:
      package_version: ${{ steps.contents.outputs.data }}
      VOLUME_MOUNT: ${{ steps.contents.outputs.volume_mount }}
      OUTPUT_DIRECTORY: ${{ steps.contents.outputs.output_directory }}
      WORKDIR: ${{ steps.contents.outputs.workdir }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3    

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Declare output variable
        id: contents
        run: |
          package_version=$(set -e && docker run --rm -i -v ${{ github.workspace }}/addons/packetfence-perl:${{ env.WORKDIR }}/ debian:11.0 /bin/bash -c \
          "set -e && cd ${{ env.WORKDIR }}/ && apt update > /dev/null 2>&1  && apt install build-essential -y > /dev/null 2>&1 && dpkg-parsechangelog --show-field Version")
          echo "Found version: $package_version"
          echo "PACKAGE_VERSION=$package_version" >> "$GITHUB_ENV"
          echo "data=$package_version" >> "$GITHUB_OUTPUT"
          echo "volume_mount=${{env.VOLUME_MOUNT}}" >> "$GITHUB_OUTPUT"
          echo "output_directory=${{env.OUTPUT_DIRECTORY}}" >> "$GITHUB_OUTPUT"
          echo "workdir=${{env.WORKDIR}}" >> "$GITHUB_OUTPUT"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ vars.USER_GITHUB }}
          password: ${{ secrets.TOKEN_GITHUB }}

      - name: Build packetfence-perl docker image
        uses: docker/build-push-action@v5
        with:
          context: './'
          push: true
          build-args: |
            workdir=${{ env.WORKDIR }}
            output_directory=${{ env.OUTPUT_DIRECTORY }}
          tags: |
            ghcr.io/inverse-inc/packetfence/packetfence-perl-debian:${{ env.PACKAGE_VERSION }}
            ${{ env.BRANCH_NAME == 'devel' && 'ghcr.io/inverse-inc/packetfence/packetfence-perl-debian:latest' || ''}}
          file: ./containers/packetfence-perl/debian/Dockerfile_debian

  build_package:
    needs: ['build_image']
    runs-on: packetfence-perl-deb-package-build

    container:
      image: ghcr.io/inverse-inc/packetfence/packetfence-perl-debian:${{ needs.build_image.outputs.package_version }}
      credentials:
        username: ${{ vars.USER_GITHUB }}
        password: ${{ secrets.TOKEN_GITHUB }}
      volumes:
        - ${{ github.workspace }}/addons/packetfence-perl/:${{ needs.build_image.outputs.WORKDIR  }}
        - ${{ needs.build_image.outputs.VOLUME_MOUNT }}:${{ needs.build_image.outputs.OUTPUT_DIRECTORY }}
    steps:     
      - name: Build package
        run: |
          cd /root
          set -e && python3 install_cpan.py -d dependencies.csv -vi true && ./build_package.sh
          ls -la ${{ env.OUTPUT_DIRECTORY }}/debian/packages/


  unit-test:
    needs: ['build_image','build_package']
    runs-on: packetfence-perl-deb-package-build
    container:
      image: debian:11.0
      volumes:
        - ${{ needs.build_image.outputs.VOLUME_MOUNT }}/debian/packages/:/mnt
    steps:     
      - name: Install the package packetfence-perl
        run: |
          ls -la /mnt
          find /mnt -name "packetfence-perl*.deb" -exec dpkg -i {} \;

  sign_package:
    needs: ['build_image', 'unit-test', 'build_package']
    runs-on: packetfence-perl-deb-package-build
    container:
      image: debian:11.0
      volumes:
        - ${{ needs.build_image.outputs.VOLUME_MOUNT }}/debian/packages/:/mnt
    steps:
      - name: Install debian dependenecies
        run:  apt update && apt install gpg dpkg-sig -y

      - name: import private key
        run: echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --pinentry-mode loopback --import

      - name: Sign the package
        run: dpkg-sig -k  B022C48D3D6373D7FC256A8CCB2D3A2AA0030E2C  --sign builder /mnt/*.deb

      - name: Verifiy the signarure of package
        run: gpg --verify  /mnt/*.deb


  upload-package: 
    needs: ['build_image', 'unit-test', 'sign_package', 'build_package']
    runs-on: packetfence-perl-deb-package-build

    env:
      PACKAGE_DEST_PATH: /root/packages/packetfence-perl/${{ github.head_ref || github.ref_name }}/debian/v_${{ needs.build_image.outputs.package_version }}/

    steps:
    - name: Upload the package to web server
      run: |
        echo "The package will be uploaded to the web server, directory: ${{ env.PACKAGE_DEST_PATH }}"
        set -e && \
        eval `ssh-agent -s` && ssh-add - <<< $(echo "${{ secrets.DEPLOY_KEY_WEB_SERVER }}")  && \
        rsync -avzr --delete --rsync-path='mkdir -p  ${{ env.PACKAGE_DEST_PATH }} && rsync' -e "ssh -o StrictHostKeyChecking=no -p 22"  ${{ env.VOLUME_MOUNT }}/debian/packages/packetfence-perl_*.deb root@192.95.20.194:${{ env.PACKAGE_DEST_PATH }}
        ssh-add -D

    - name: Remove files
      uses: addnab/docker-run-action@v3
      with:
        image: ubuntu:20.04
        options: --rm -v /mnt:/mnt
        shell: /bin/bash
        run: |
            rm -rf ${{ env.VOLUME_MOUNT }}

